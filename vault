#! /usr/bin/env python

import binascii
import datetime
import getpass
import mcrypt
import os
import random
import sqlite3
import stat
import struct
import sys
import textwrap
import time

class ANSI(object):
    ESC     = '\x1b['
    # Colors
    RED     = ESC + '1;31m'
    GREEN   = ESC + '1;32m'
    YELLOW  = ESC + '1;33m'
    BLUE    = ESC + '1;34m'
    BOLD    = ESC + '1;37m'
    NORMAL  = ESC + '0m'
    # Cursor
    SAVE    = ESC + 's'
    LOAD    = ESC + 'u'
    UP      = ESC + 'A'
    CLREOL  = ESC + 'K'

class Vault(object):
    STRUCT_ITEM = '<L64p'

    def __init__(self, options):
        self.filename = os.path.expanduser(options.filename)
        if options.keyfile:
            self.secret = file(options.keyfile).read().strip()
        self.check_perms()
        self.check_vault()

    # checks

    def check_perms(self):
        if not os.path.isfile(self.filename):
            return

        info = os.stat(self.filename)
        ifmt = stat.S_IFMT(info.st_mode)
        good = True
        if ifmt & stat.S_IRGRP or ifmt & stat.S_IROTH:
            self.warn('%s: group or other readable' % (self.filename,))
            good = False
        if ifmt & stat.S_IWGRP or ifmt & stat.S_IWOTH:
            self.warn('%s: group or other writable' % (self.filename,))
            good = False
        if not good:
            self.info('%s: fixed permissions' % (self.filename,))
            os.chmod(self.filename, 0600)

    def check_vault(self):
        self.db = sqlite3.connect(self.filename, isolation_level=None)
        cursor = self.db.cursor()
        try:
            self.db.execute('''
            CREATE TABLE IF NOT EXISTS vault (
                uuid TEXT
            );
            ''')
            self.db.execute('''
            CREATE TABLE IF NOT EXISTS section (
                name TEXT
            );
            ''')
            self.db.execute('''
            CREATE TABLE IF NOT EXISTS item (
                section_name TEXT,
                name         TEXT,
                password     TEXT,
                description  TEXT,
                date_created FLOAT,
                date_updated FLOAT
            );
            ''')
            self.db.commit()
        finally:
            cursor.close()

    # main stuff

    def run(self, args):
        hook = getattr(self, '_'.join(['do', args[0]]), None)
        if hook:
            try:
                return hook(*args[1:])
            except TypeError:
                return self.do_help(args[0])
        else:
            self.fail('%s: no such command' % (args[0],))

    def ask_password(self, prompt):
        sys.stdout.flush()
        password = getpass.getpass(prompt)
        sys.stdout.flush()
        sys.stdout.write(ANSI.UP)
        sys.stdout.write(ANSI.CLREOL)
        sys.stdout.flush()
        return password

    def do_help(self, command=None):
        '''
        help [<command>] 

        Shows help on the given command, its syntax and its purpose.
        '''
        if not command:
            self.do_help('help')
            sys.stdout.write('\nAvailable commands:\n\n')
            for func in [f.replace('do_', '', 1) for f in dir(self) if f.startswith('do_')]:
                sys.stdout.write('\t%s\n' % (func,))
            sys.stdout.flush()
            return

        hook = getattr(self, '_'.join(['do', command]), None)
        if hook:
            if hook.__doc__:
                sys.stdout.write('Usage: %s ' % (sys.argv[0],))
                sys.stdout.write(textwrap.dedent(hook.__doc__.strip('\r\n')))
            else:
                sys.stdout.write('Usage: %s <args>' % (sys.argv[0],))
                sys.stdout.write('\nNo more help available\n')
            sys.stdout.flush()
        else:
            self.fail('%s: no such command' % (command,))

    def do_del(self, section, name):
        '''
        del <section> <name>

        Removes <name> from <section> in the vault.
        '''
        self.check_crypt()
        cursor = self.db.cursor()
        try:
            delete = '''
                DELETE FROM item
                 WHERE section_name = ?
                   AND name = ?;
                '''
            cursor.execute(delete, (section, self.encrypt(name)))
            self.db.commit()
            self.info('Done')
        finally:
            cursor.close()

    def do_get(self, section, *args):
        '''
        get <section> [<name>]

        Get the password(s) for a section. If you specify the name you also get
        the details about the entry.
        '''
        self.check_crypt()
        cursor = self.db.cursor()
        try:
            if args:
                name = args[0]
                select = '''
                    SELECT name, password, description, date_created, date_updated
                      FROM item
                    WHERE section_name = ?
                      AND name = ?;
                    '''
                cursor.execute(select, (section, self.encrypt(name),))
                result = cursor.fetchone()
                if result:
                    headings = ['name', 'password', 'description', 'date_created', 'date_updated']
                    for x in xrange(0, len(headings)):
                        sys.stdout.write(headings[x].replace('_', ' ').ljust(12, '.'))
                        sys.stdout.write(': ')
                        if headings[x].startswith('date_'):
                            sys.stdout.write(datetime.datetime.utcfromtimestamp(result[x]).strftime('%D %T'))
                        elif x < 2:
                            sys.stdout.write(self.decrypt(result[x]))
                        elif result[x]:
                            sys.stdout.write(result[x])
                        sys.stdout.write('\n')
                else:
                    self.fail('No entries found')
            else:
                select = '''
                    SELECT name, password
                      FROM item
                     WHERE section_name = ?;
                     '''
                cursor.execute(select, (section,))
                result = cursor.fetchall()
                if result:
                    result = [map(self.decrypt, (name, password)) for name, password in result]
                    self.table(result, 'name', 'password', color=0)
                else:
                    self.fail('No entries found')
        finally:
            cursor.close()

    def do_list(self, section=None):
        '''
        list

        Show all sections and their entries.
        '''
        self.check_crypt()
        cursor = self.db.cursor()
        try:
            select = '''
                SELECT section_name, name, date_created
                  FROM item
                 ORDER BY section_name, name;
                '''
            cursor.execute(select)
            result = cursor.fetchall()
            if result:
                result = [(section, self.decrypt(name), 
                    datetime.datetime.utcfromtimestamp(date).strftime('%D %T')) \
                    for section, name, date in result]
                self.table(result, 'section', 'name', 'date created', color=1)
            else:
                self.fail('No data found')
        finally:
            cursor.close()

    def do_set(self, section, name):
        '''
        set <section> <name>

        Set the password for <name> in <section>. For example:

            set personal weblog

        This will add the given item to the database.
        '''
        self.check_crypt()
        self.db_check_section(section)
        p1 = self.ask_password('Password: ')
        if not p1:
            self.fail('No password received, did you mean to use %d del?' % (sys.argv[0],))
        p2 = self.ask_password('Password (confirm): ')
        if p1 != p2:
            self.fail('Password confirmation failed')
        self.db_set(section, self.encrypt(name), self.encrypt(p1))
        self.info('Password set')

    # database stuff

    def db_check_section(self, section):
        cursor = self.db.cursor()
        try:
            select = '''
                SELECT *
                  FROM section
                 WHERE name = ?;
                '''
            result = self.db.execute(select, (section,))
            if result.fetchone() is None:
                insert = '''
                    INSERT INTO section
                        (name)
                    VALUES
                        (?);
                    '''
                self.db.execute(insert, (section,))
                self.db.commit()
                return False
            else:
                return True
        finally:
            cursor.close()

    def db_set(self, section, name, password):
        cursor = self.db.cursor()
        try:
            select = '''
                SELECT rowid
                  FROM item
                 WHERE section_name = ?
                   AND name = ?;
                '''
            result = self.db.execute(select, (section, name))
            exists = result.fetchone()
            if exists is None:
                insert = '''
                    INSERT INTO item
                        (section_name, name, password, date_created, date_updated)
                    VALUES
                        (?, ?, ?, ?, ?);
                    '''
                self.db.execute(insert, (section, name, password, time.time(), time.time()))
            else:
                update_id = exists[0]
                update = '''
                    UPDATE item
                       SET password = ?,
                           date_updated = ?
                     WHERE rowid = ?;
                    '''
                self.db.execute(update, (password, time.time(), update_id))
            self.db.commit()
        finally:
            cursor.close()

    # crypt stuff

    def encrypt(self, data):
        try:
            # We can only store 63 bytes of data (+1 for nullbyte)
            data = str(data)[:63]
            pack = struct.pack(self.STRUCT_ITEM, len(data), data)
            try:
                null = i = 0
                while null < 5:
                    null = pack.index('\x00', i) + 1
                    i += 1
                if null < len(pack):
                    size = len(pack)
                    pack = pack[:null]
                    pads = len(pack)
                    rots = sum(map(ord, pack))
                    for x in xrange(pads, size):
                        pack = pack + self.padding[(x - pads + rots) % len(self.padding)]
            except ValueError:
                pass
            return self.crypto.encrypt(pack, fixlength=1).encode('base64').replace('\n', '')
        finally:
            self.crypto.reinit()

    def decrypt(self, data):
        try:
            try:
                data = data.decode('base64')
                pack = self.crypto.decrypt(data, fixlength=1)
                size, data = struct.unpack(self.STRUCT_ITEM, pack)
                if len(data) != size:
                    self.fail('Invalid key')
                else:
                    return data.split('\x00')[0]
            except (binascii.Error, struct.error, SystemError):
                #raise
                self.fail('Invalid key')
        finally:
            self.crypto.reinit()

    def check_crypt(self):
        if not hasattr(self, 'secret'):
            self.secret = self.ask_password('Encryption key: ')
        if not hasattr(self, 'crypto'):
            self.crypto = mcrypt.MCRYPT('rijndael-256', 'ecb')
            if len(self.secret) < self.crypto.get_key_size():
                self.crypto.init(self.secret.ljust(self.crypto.get_key_size(), '\x00'))
            else:
                self.crypto.init(self.secret[self.crypto.get_key_size():])
            # Check the credentials
            self.check_uuid()

    def check_uuid(self):
        cursor = self.db.cursor()
        try:
            select = '''
                SELECT uuid
                  FROM vault;
                '''
            cursor.execute(select)
            result = cursor.fetchone()
            if result is None:
                import uuid
                insert = '''
                    INSERT INTO vault
                        (uuid)
                    VALUES
                        (?);
                    '''
                self.padding = ''.join(map(str, [uuid.uuid4(), uuid.uuid4()]))
                check = self.encrypt(self.padding)
                cursor.execute(insert, (check,))
            else:
                self.padding = self.decrypt(result[0])
        finally:
            cursor.close()

    # help stuff

    def info(self, message):
        sys.stderr.write(''.join([ANSI.YELLOW, 'INFO ', ANSI.NORMAL, message, '\n']))

    def warn(self, message):
        sys.stderr.write(''.join([ANSI.RED, 'WARN ', ANSI.NORMAL, message, '\n']))

    def fail(self, message):
        sys.stderr.write(''.join([ANSI.RED, 'FAIL ', ANSI.NORMAL, message, '\n']))
        sys.exit(1)

    def table(self, result, *headings, **kwargs):
        if 'color' in kwargs:
            color = kwargs.pop('color')
        else:
            color = None

        # Insert headings
        result.insert(0, [h.title() for h in headings])

        # Calculate heading sizes
        sizes = [1] * len(headings)
        for row in result:
            for x in xrange(0, len(sizes)):
                if len(row[x]) > sizes[x]:
                    sizes[x] = len(row[x])

        # Insert heading borders
        result.insert(1, ['-' * sizes[x] for x in xrange(0, len(sizes))])

        # Create formatting strings
        sizes = ['%%-%ds' % (size,) for size in sizes]

        # Output rows
        for y in xrange(0, len(result)):
            row = result[y]
            for x in xrange(0, len(sizes)):
                if (y == 0):
                    sys.stdout.write(ANSI.BOLD)
                    sys.stdout.write(sizes[x] % row[x])
                    sys.stdout.write(ANSI.NORMAL)
                elif (color == x and y != 1):
                    sys.stdout.write(ANSI.YELLOW)
                    sys.stdout.write(sizes[x] % row[x])
                    sys.stdout.write(ANSI.NORMAL)
                else:
                    sys.stdout.write(sizes[x] % row[x])
                if (x + 1) < len(sizes):
                    if y == 1:
                        sys.stdout.write('-+-')
                    else:
                        sys.stdout.write(' | ')
            sys.stdout.write('\n')
        sys.stdout.flush()

def run():
    import optparse

    parser = optparse.OptionParser(usage='%prog [<options>] <command> [<args>]')
    parser.add_option('-f', '--file', dest='filename', default='~/.vault',
        help='vault filename (default: ~/.vault)')
    parser.add_option('-k', '--keyfile', dest='keyfile', default='',
        help='vault keyfile filename (default: no file)')

    options, args = parser.parse_args()

    vault = Vault(options)
    if args:
        return vault.run(args)
    else:
        return vault.run(('help',))

if __name__ == '__main__':
    sys.exit(run())

